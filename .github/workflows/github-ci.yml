# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: 
      - develop
      - sandbox
      - production
      - staging
      - 'features/**'

  pull_request:
    branches:
      - develop
      - sandbox
      - production
      - staging
      - 'features/**'

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:
  #   inputs:
  #     BRANCH:
  #       type: choice
  #       required: true
  #       description: Deploy Target Branch
  #       options:
  #         - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup-env:
    runs-on: ubuntu-latest
    name: Checkout and setup enviroment
    steps:
      - name: Setup the enviroment base on the branch
        id: setup
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/production" ]; then
            echo "branch_env=production" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "branch_env=develop" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "branch_env=staging" >> "$GITHUB_OUTPUT"
          else
             echo "branch_env=sandbox" >> "$GITHUB_OUTPUT"
          fi
    outputs:
      branch_env: ${{ steps.setup.outputs.branch_env }}

  show-env:
    runs-on: ubuntu-latest
    needs: [setup-env]
    name: Show env 1
    environment:
      name: ${{ needs.setup-env.outputs.branch_env }}
    steps:
      - name: Show the enviroment
        run: |
          if [ "${{ secrets.SECRET_NAME }}" = "production_secret" ]; then
            echo "production secret is here"
          elif [ "${{ secrets.SECRET_NAME }}" = "staging_secret" ]; then
            echo "staging secret  is here"
          elif [ "${{ secrets.SECRET_NAME }}" = "develop_secret" ]; then
            echo "develop secret  is here"
          elif [ "${{ secrets.SECRET_NAME }}" = "sandbox_secret" ]; then
            echo "sandbox secret  is here"
          else
             echo "nothing"
          fi

          if [ "$name" = "production" ]; then
            echo "production is here"
          elif [ "$name" = "staging" ]; then
            echo "staging  is here"
          elif [ "$name" = "develop" ]; then
            echo "develop_  is here"
          elif [ "$name" = "sandbox" ]; then
            echo "sandbox  is here"
          else
             echo "nothing env name"
          fi

          if [ "$ENV_NAME" = "production" ]; then
            echo "production 2 is here"
          elif [ $ENV_NAME = "staging" ]; then
            echo "staging 2  is here"
          elif [ $ENV_NAME = "develop" ]; then
            echo "develop 2 is here"
          elif [ $ENV_NAME = "sandbox" ]; then
            echo "sandbox 2  is here"
          else
             echo "nothing 2 env name"
          fi


  # This workflow contains a single job called "build"
  # build-terraform:
  #   if: github.ref == 'refs/heads/main'
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   env:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AWS_DEFAULT_REGION: ${{ secrets.REGION }}

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Checkout the source
  #       uses: actions/checkout@v3

  #     # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
  #     - name: Install manual terraform
  #       run: |
  #         wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
  #         echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
  #         sudo apt update && sudo apt install terraform

  #     - name: AWS Plan Copy
  #       id: copyfrom
  #       run: aws s3 cp s3://aokumo-develop/terraform.tfstate infrastrure_terraform/terraform.tfstate
  #       continue-on-error: true

  #     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  #     - name: Terraform Init
  #       run: echo "Run Terraform Init"
  #       # cd infrastrure_terraform
  #       # terraform init -input=false

  #     # Generate Terraform Plan and store in .tfplan file
  #     - name: Terraform Plan
  #       run: echo "Run Terraform Plan"
  #       # cd infrastrure_terraform 
  #       # ls -al
  #       # terraform plan -var-file="dev.tfvars"

  #     - name: Terraform Apply
  #       run: |
  #         cd infrastrure_terraform
  #         terraform apply -var-file="dev.tfvars" -auto-approve -input=false

  #     - name: AWS Plan Copy
  #       # if: github.event_name == 'push' && steps.apply.outcome == 'success'
  #       run: aws s3 cp infrastrure_terraform/terraform.tfstate s3://aokumo-develop/terraform.tfstate
  #       id: copy
