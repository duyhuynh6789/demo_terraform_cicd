# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-frontend:
    runs-on: ubuntu-latest
    container: node:12.22

    steps:
      - name: Checkout the source
        uses: actions/checkout@v3

      - run: |
          cd frontend
          npm cache clean -f
          npm install
          npm run build
      # Cache the node_module
      - uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: frontend-build
    
  test-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    container: node:12.22

    steps:
      - name: Checkout the source
        uses: actions/checkout@v3
      
      - uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: frontend-build

      - run: |
          cd frontend
          npm install
          npm run test

  scan-frontend:
    needs: test-frontend
    runs-on: ubuntu-latest
    container: node:12.22

    steps:
      - name: Checkout the source
        uses: actions/checkout@v3

      - name: Checkout the cache
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: frontend-build

      - name: Run scan
        run: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force
        # npm audit --audit-level=critical

  # This workflow contains a single job called "build"
  build-terraform:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the source
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration.
      - name: Install manual terraform
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform

      - name: AWS Plan Copy
        id: copyfrom
        run: aws s3 cp s3://aokumo-develop/terraform.tfstate infrastrure_terraform/terraform.tfstate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.REGION }}
        continue-on-error: true

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastrure_terraform
          terraform init -input=false

      # Generate Terraform Plan and store in .tfplan file
      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastrure_terraform 
          ls -al
          terraform plan -var-file="dev.tfvars"

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infrastrure_terraform
          terraform apply -var-file="dev.tfvars" -auto-approve -input=false

      - name: AWS Plan Copy
        # if: github.event_name == 'push' && steps.apply.outcome == 'success'
        run: aws s3 cp infrastrure_terraform/terraform.tfstate s3://aokumo-develop/terraform.tfstate
        id: copy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.REGION }}